basePath: /
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Book:
    properties:
      author:
        type: string
      createdAt:
        type: string
      createdBy:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      genre:
        type: string
      id:
        type: integer
      tag:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      year:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      updatedAt:
        type: string
    type: object
  requests.BookPayload:
    properties:
      author:
        type: string
      genre:
        type: string
      tag:
        type: string
      title:
        type: string
      year:
        type: string
    required:
    - author
    - title
    type: object
  requests.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  requests.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  responses.Error:
    properties:
      code:
        type: integer
      error:
        type: string
    type: object
  responses.LoginResponse:
    properties:
      accessToken:
        type: string
      exp:
        type: integer
      refreshToken:
        type: string
    type: object
info:
  contact: {}
  description: Book List
  title: Book List
  version: "1.0"
paths:
  /api/books:
    post:
      consumes:
      - application/json
      description: Create book
      operationId: books-create
      parameters:
      - description: Book title and author
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/requests.BookPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Error'
      security:
      - ApiKeyAuth: []
      summary: Create book
      tags:
      - Books Actions
  /api/books/{id}:
    delete:
      description: Delete book
      operationId: books-delete
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/models.Book'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete book
      tags:
      - Books Actions
    get:
      consumes:
      - application/json
      description: Get books
      operationId: books-get
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Error'
      security:
      - ApiKeyAuth: []
      summary: Get books
      tags:
      - Books Actions
    put:
      consumes:
      - application/json
      description: Update book
      operationId: books-update
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Book title and author
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/requests.BookPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Error'
      security:
      - ApiKeyAuth: []
      summary: Update book
      tags:
      - Books Actions
  /auth/login:
    post:
      consumes:
      - application/json
      description: Perform user login
      operationId: user-login
      parameters:
      - description: User's credentials
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/requests.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.Error'
      summary: Authenticate a user
      tags:
      - Auth Actions
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a user
      operationId: user-register
      parameters:
      - description: User's credentials
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/requests.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.Error'
      summary: Register a user
      tags:
      - Auth Actions
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
